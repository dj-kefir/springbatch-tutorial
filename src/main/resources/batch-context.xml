<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:batch="http://www.springframework.org/schema/batch"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <import resource="database-context.xml"/>

    <context:component-scan base-package="ru.oz.mytutors.springbatch.processors"/>

    <bean id="studentMarshaller" class="org.springframework.oxm.jaxb.Jaxb2Marshaller">
        <property name="classesToBeBound">
            <list>
                <value>ru.oz.mytutors.springbatch.model.Student</value>
                <value>ru.oz.mytutors.springbatch.model.sem.Price</value>
            </list>
        </property>
        <property name="marshallerProperties">
            <map>
                <entry key="jaxb.formatted.output">
                    <value type="boolean">true</value>
                </entry>
            </map>
        </property>
    </bean>

    <bean id="xmlItemWriter" class="org.springframework.batch.item.xml.StaxEventItemWriter">
        <property name="resource" value="file:data/outs/out.xml"/>
        <property name="marshaller" ref="studentMarshaller"/>
        <property name="rootTagName" value="student"/>
    </bean>

    <bean id="cvsFileItemReader" class="org.springframework.batch.item.file.FlatFileItemReader">
        <property name="linesToSkip" value="1"/>
        <property name="resource" value="classpath:data/inputs/students.csv"/>

        <property name="lineMapper">
            <bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
                <property name="lineTokenizer">

                    <bean class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
                        <property name="delimiter" value=";"/>
                        <property name="names" value="NAME,EMAIL_ADDRESS,PACKAGE"/>
                    </bean>
                </property>
                <property name="fieldSetMapper">
                    <bean class="ru.oz.mytutors.springbatch.mappers.TestFieldSetMapper"/>

                    <!-- if no data type conversion, use BeanWrapperFieldSetMapper to map by name
                   <bean
                       class="org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper">
                       <property name="prototypeBeanName" value="report" />
                   </bean>
                    -->
                </property>
            </bean>
        </property>

    </bean>

    <bean id="itemProcessor" class="ru.oz.mytutors.springbatch.processors.CustomItemProcessor"/>

    <!-- stored job-meta in memory -->
    <!--
    <bean id="jobRepository"
        class="org.springframework.batch.core.repository.support.MapJobRepositoryFactoryBean">
        <property name="transactionManager" ref="transactionManager" />
    </bean>
      -->

    <!-- stored job-meta in database -->
    <bean id="jobRepository"
          class="org.springframework.batch.core.repository.support.JobRepositoryFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="transactionManager" ref="transactionManager"/>
        <property name="databaseType" value="h2"/>
    </bean>

    <bean id="transactionManager"
          class="org.springframework.batch.support.transaction.ResourcelessTransactionManager"/>

    <bean id="jobLauncher"
          class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
        <property name="jobRepository" ref="jobRepository"/>
    </bean>

    <!--<batch:job id="testJob">-->
    <!--<batch:step id="step1">-->
    <!--<batch:tasklet>-->
    <!--<batch:chunk reader="cvsFileItemReader" writer="xmlItemWriter"-->
    <!--processor="itemProcessor" commit-interval="10">-->
    <!--</batch:chunk>-->
    <!--</batch:tasklet>-->
    <!--</batch:step>-->
    <!--</batch:job>-->


    <bean id="priceReader" class="org.springframework.batch.item.file.FlatFileItemReader">
        <property name="linesToSkip" value="1"/>
        <property name="resource" value="classpath:data/sem/msk_price.csv"/>
        <property name="strict" value="true"></property>

        <property name="lineMapper">
            <bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
                <property name="lineTokenizer">

                    <bean class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
                        <property name="delimiter" value=";"/>
                        <property name="names" value="PID,PRICE"/>
                    </bean>
                </property>
                <property name="fieldSetMapper">
                    <bean class="ru.oz.mytutors.springbatch.mappers.PriceMapper"/>
                </property>
            </bean>
        </property>
    </bean>

    <batch:job id="priceCsvToXmlConvertionJob">
        <batch:step id="step2">
            <batch:tasklet>
                <batch:chunk reader="priceReader"
                             writer="xmlItemWriter"
                             processor="priceItemProcessor"
                             commit-interval="10">
                </batch:chunk>
            </batch:tasklet>
        </batch:step>
    </batch:job>
</beans>